// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  hashedPassword      String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  favoriteIds         String[]  @db.ObjectId
  emailNotifications  Boolean   @default(false)
  level               Int       @default(0)
  verified            Boolean   @default(false)
  badges              String[]  @default([])
  resetToken          String?
  resetTokenExpiry    DateTime?

  accounts            Account[]
  recipes             Recipe[]
  comments            Comment[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Recipe {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageSrc String
  createdAt DateTime @default(now())
  category String
  method String
  minutes Int
  numLikes Int
  ingredients String[]
  steps String[]
  extraImages String[]
  userId String @db.ObjectId
  coCooksIds String[] @db.ObjectId @default([])
  linkedRecipeIds String[] @db.ObjectId @default([])

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  comment String
  recipeId String @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model WeeklyChallenge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  type        String   // "ingredient", "cuisine", "recipe", "technique", "dietary"
  value       String   // The specific ingredient, cuisine, or recipe name
  startDate   DateTime @default(now())
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
